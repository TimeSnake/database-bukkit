group = project.group
version = project(":database-api").version
archivesBaseName = 'database-bukkit'
var projectId = 44

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
  }
  maven {
    url = uri 'https://papermc.io/repo/repository/maven-public/'
  }
  maven {
    url = uri 'https://repo.maven.apache.org/maven2/'
  }
  mavenCentral()
}

dependencies {
  implementation project(':database-api')

  compileOnly project.toml

  compileOnly project.paper_api
}

task buildFatJar(type: Jar) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  classifier = "all"
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  with jar
}

task deleteOldPluginJar(type: Delete) {
  delete fileTree(dir: "${project.plugins_dir}", include: "**/${archivesBaseName}-*.jar")
  onlyIf {
    !jar.state.upToDate
  }
}

task copyJarToPlugins(type: Copy) {
  from "build/libs/" + archivesBaseName + "-" + version + "-all" + ".jar"
  into project.plugins_dir
}

jar.finalizedBy(buildFatJar)
copyJarToPlugins.dependsOn(buildFatJar)
copyJarToPlugins.dependsOn(deleteOldPluginJar)
jar.finalizedBy(copyJarToPlugins)

publishing {
  publications {
    mavenJavaAll(MavenPublication) {
      version version + '-all'
      artifact {
        file "build/libs/" + archivesBaseName + "-" + version + ".jar"
      }
    }
  }

  repositories {
    maven {
      url getDeployUrl(projectId)
      credentials {
        username = deploy_token_name
        password = deploy_token_key
      }
    }
  }
}